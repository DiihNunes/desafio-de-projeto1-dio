gitBash - comandos

git init é um comando único que você usa durante a configuração inicial de um novo 
repositório dentro de uma pasta.
ele inicializa um repositorio no arquivo o qual foi dado cd

git config: atribui uma configuração de identificação do usuario.
git config --global user.email "seuemail@gmail.com"
git config --global user.name nick_do_git

(para deslogar)
git config --global --unset user.email
git config --global --unset user.name

git remote: cadastra repositorios remotos
git remote add origin <link>
("origin" é um alias)

git remote -v :exibe os repositorios remotos que estão na sua maquina 

git clone

Este comando é usado para criar uma cópia local de um repositório remoto do GitHub para o seu computador,
o primeiro passo para começar a trabalhar em um projeto. O comando é executado da seguinte forma:

git clone <URL do repositório>
ex.: git clone https://github.com/dio_repositorio.git



git add

Este comando é usado para adicionar mudanças em arquivos ao próximo "commit", e permite que você especifique
quais arquivos devem ser incluídos na próxima versão do projeto. O comando é:

git add <nome do arquivo>  # Adicionar um arquivo específico
git add .  # Adicionar todos os arquivos modificados
ex.: git add README.md



git commit

Este comando é usado para criar um novo commit, que é uma nova versão do projeto com as mudanças adicionadas
com o comando git add. É sempre muito importante adicionar uma mensagem de commit descritiva para explicar as
mudanças feitas e auxiliar a quem esta lendo o código. O comando é:

git commit -m "Mensagem do commit"
ex.: git commit -m "Mudando o Readme.md - Teste conexao"



git pull

Comando usado para obter as últimas mudanças do repositório remoto para a sua cópia local do projeto.
É importante executar esse comando regularmente ou sempre que deseja manter sua cópia local atualizada
com as mudanças feitas por outros programadores da equipe. O comando é:

git pull
ex.: git pull



git push

Comando muito usado, envia suas mudanças locais para o repositório remoto no GitHub. Depois de fazer mudanças
e criar commits locais, você precisa enviá-los para o repositório remoto para compartilhá-los com outros da equipe. O comando é:

git push origin <nome da branch>
ex.: git push origin main



git branch

Comando usado para criar, listar e gerenciar branches, que são as ramificações de desenvolvimento do projeto, 
ou seja, Branches são ramos usados para separar diferentes fluxos de trabalho e facilitar o trabalho em equipe.
O comando é:

git branch  # Listar todas as branches
git branch <nome da branch>  # Criar uma nova branch
git branch -d <nome da branch>  # Deletar uma branch
git checkout <nome da branch>  # Mudar para uma branch específica
ex.: git branch minhaBranch



git merge

Comando usado para combinar as mudanças de uma branch em outra, sendo muito útil quando você deseja mesclar
o trabalho de diferentes branches em uma única versão do projeto. O comando é:

git merge <nome da branch>
ex.: git merge main

**CMD - comandos do terminal:**
dir: lista as pastas dentro daquele diretório. (ls no linux)

cd: cd(change directory)é usado para a navegação entre as pastas.
"cd nome_pasta" entra dentro da pasta
"cd .." retrocede uma pasta.
ambos os comandos funcionam em windows e linux.

cls: limpa o terminal(clear/ctrl+L em linux).

tab: auto-completa o que você está escrevendo.

ls: lista as pastas que estão no diretorio.
ls -a: exibe também as pastas ocultas do diretorio.

mkdir: cria uma pasta no diretório.
mkdir nome_nova_pasta

echo: printa na tela o que for passado depois do comando.
ele também pode passar o que foi printado para um arquivo existente, se não existir ele será criado.
echo olá > hello.txt.
O "olá" foi passado para o arquivo com o  nome de hello.txt.


del: deleta os arquivos que estão dentro de uma pasta que é citada depois do comando.

rmdir: apaga o diretório e os arquivos que estão no mesmo.
"rmdir dir_name /S /Q"
("rm -rf dir_name" no linux. o rf vem como forma de você comunicar ao terminal que não é necessario nenhuma
pergunta de confirmação para executar o comando).

arrow key up: puxa os comandos recentes. 

cat dir_name: mostra o conteúdo do diretorio que foi passado após o comando.

pwd: caso esteja em um diretorio o qual não lembre o caminho, pwd ira mostrar o endereço
do diretorio em sua maquina.